service: strava

provider:
  name: aws
  stage: prod
  runtime: go1.x
  region: us-east-1
  deploymentBucket: ops-config-mgmt
  iamRoleStatements:
    - Effect: "Allow"
      Action: "sns:Publish"
      Resource:
        "Fn::GetAtt": [ SNSTopic, Arn ]
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/Athlete"

functions:
  subscription:
    handler: bin/subscription
    memorySize: 128
    events:
      - http:
          path: event
          method: GET
          cors: true
    environment:
      STRAVA_VERIFY_TOKEN: "${ssm:STRAVA_VERIFY_TOKEN}"
  webhook:
    handler: bin/webhook
    memorySize: 128
    events:
      - http:
          path: event
          method: POST
          cors: true
    environment:
      STRAVA_SUBSCRIPTION_ID: "${ssm:STRAVA_SUBSCRIPTION_ID}"
      SNS_TOPIC:
        "Fn::GetAtt": [ SNSTopic, Arn ]
  activity:
    handler: bin/activity
    memorySize: 128
    events:
      - sns:
        "Fn::GetAtt": [ SNSTopic, Arn ]
    environment:
      GOOGLE_API_KEY: "${ssm:GOOGLE_API_KEY}"


package:
  exclude:
    - ./**
  include:
    - ./bin/**

plugins:
  - serverless-plugin-scripts
  - serverless-domain-manager

custom:
  customDomain:
    domainName: api.ridegopher.com
    stage: prod
    basePath: strava
  scripts:
    hooks:
      package:initialize: make do_all

resources:
  Resources:
    SNSTopic:
      Type: "AWS::SNS::Topic"
      Properties:
        DisplayName: "Strava Webhook Events"
        TopicName: strava-webhook-events